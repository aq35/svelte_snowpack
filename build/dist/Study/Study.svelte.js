import './Study.svelte.css.proxy.js';
/* src/Study/Study.svelte generated by Svelte v3.48.0 */
import {
	SvelteComponent,
	append,
	attr,
	check_outros,
	compute_slots,
	create_slot,
	detach,
	element,
	get_all_dirty_from_scope,
	get_slot_changes,
	group_outros,
	init,
	insert,
	safe_not_equal,
	space,
	transition_in,
	transition_out,
	update_slot_base
} from "../../_snowpack/pkg/svelte/internal.js";

const get_body_slot_changes = dirty => ({});
const get_body_slot_context = ctx => ({});
const get_title_slot_changes = dirty => ({});
const get_title_slot_context = ctx => ({});

// (2:1) {#if $$slots.title}
function create_if_block_1(ctx) {
	let current;
	const title_slot_template = /*#slots*/ ctx[2].title;
	const title_slot = create_slot(title_slot_template, ctx, /*$$scope*/ ctx[1], get_title_slot_context);

	return {
		c() {
			if (title_slot) title_slot.c();
		},
		m(target, anchor) {
			if (title_slot) {
				title_slot.m(target, anchor);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (title_slot) {
				if (title_slot.p && (!current || dirty & /*$$scope*/ 2)) {
					update_slot_base(
						title_slot,
						title_slot_template,
						ctx,
						/*$$scope*/ ctx[1],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[1])
						: get_slot_changes(title_slot_template, /*$$scope*/ ctx[1], dirty, get_title_slot_changes),
						get_title_slot_context
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(title_slot, local);
			current = true;
		},
		o(local) {
			transition_out(title_slot, local);
			current = false;
		},
		d(detaching) {
			if (title_slot) title_slot.d(detaching);
		}
	};
}

// (5:1) {#if $$slots.body}
function create_if_block(ctx) {
	let current;
	const body_slot_template = /*#slots*/ ctx[2].body;
	const body_slot = create_slot(body_slot_template, ctx, /*$$scope*/ ctx[1], get_body_slot_context);

	return {
		c() {
			if (body_slot) body_slot.c();
		},
		m(target, anchor) {
			if (body_slot) {
				body_slot.m(target, anchor);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (body_slot) {
				if (body_slot.p && (!current || dirty & /*$$scope*/ 2)) {
					update_slot_base(
						body_slot,
						body_slot_template,
						ctx,
						/*$$scope*/ ctx[1],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[1])
						: get_slot_changes(body_slot_template, /*$$scope*/ ctx[1], dirty, get_body_slot_changes),
						get_body_slot_context
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(body_slot, local);
			current = true;
		},
		o(local) {
			transition_out(body_slot, local);
			current = false;
		},
		d(detaching) {
			if (body_slot) body_slot.d(detaching);
		}
	};
}

function create_fragment(ctx) {
	let section;
	let t;
	let current;
	let if_block0 = /*$$slots*/ ctx[0].title && create_if_block_1(ctx);
	let if_block1 = /*$$slots*/ ctx[0].body && create_if_block(ctx);

	return {
		c() {
			section = element("section");
			if (if_block0) if_block0.c();
			t = space();
			if (if_block1) if_block1.c();
			attr(section, "class", "svelte-pqa6i5");
		},
		m(target, anchor) {
			insert(target, section, anchor);
			if (if_block0) if_block0.m(section, null);
			append(section, t);
			if (if_block1) if_block1.m(section, null);
			current = true;
		},
		p(ctx, [dirty]) {
			if (/*$$slots*/ ctx[0].title) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty & /*$$slots*/ 1) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_1(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(section, t);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (/*$$slots*/ ctx[0].body) {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty & /*$$slots*/ 1) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(section, null);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(if_block1);
			current = true;
		},
		o(local) {
			transition_out(if_block0);
			transition_out(if_block1);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(section);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	const $$slots = compute_slots(slots);

	$$self.$$set = $$props => {
		if ('$$scope' in $$props) $$invalidate(1, $$scope = $$props.$$scope);
	};

	return [$$slots, $$scope, slots];
}

class Study extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default Study;